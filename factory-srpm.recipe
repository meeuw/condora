import re
import tempfile
import subprocess
import shutil
import os
import os.path
import conary.conarycfg
import conary.build.lookaside
import time
RE_CLASS = re.compile(
    r'''^class\s+(\S+)\(''')

class SRPMPackageRecipe(PackageRecipe):
    buildRequiresMap = {}
    rpmName = ''
    rpmUpVer = ''
    rpmDist = ''
    buildRequires = [ 'rpm', 'rpm-build', 'conary-policy-condora',
        # minumum build environment Fedora:
        'bash:runtime', 'bzip2:runtime', 'coreutils:runtime', 'cpio:runtime',
        'diffutils:runtime', 'findutils:runtime', 'gawk:runtime',
        'gcc:runtime', 'gcc:devel', 'gcc-c++:runtime', 'grep:runtime',
        'gzip:runtime', 'info:runtime', 'make:runtime', 'patch:runtime',
        'sed:runtime', 'shadow-utils:runtime', 'tar:runtime', 'unzip:runtime',
        'util-linux:runtime', 'which:runtime', 'xz:runtime',
        'glibc-devel:runtime', 'glibc-devel:devel', 'glibc-headers:runtime',
        'glibc-headers:devel', 'file:runtime', 'doxygen:runtime',
        'libstdc++-devel:runtime', 'libstdc++-devel:devel',
        'kernel-headers:runtime', 'kernel-headers:devel','pkgconfig:runtime',
        'pkgconfig:devel', 'autoconf:runtime' ]

    @classmethod
    def geturlinfo(cls):
        if not cls.rpmName: cls.rpmName = cls.name
        if not cls.rpmUpVer: cls.rpmUpVer = cls.version
        if not cls.rpmDist: cls.rpmDist = ''
        macros = {
            'rpmName': cls.rpmName,
            'rpmUpVer': cls.rpmUpVer,
            'rpmDist': cls.rpmDist,
            'rpmRelease': cls.rpmRelease,
        }
        return 'http://kojipkgs.fedoraproject.org/packages/%(rpmName)s/%(rpmUpVer)s/%(rpmRelease)s/src' % macros, '%(rpmName)s-%(rpmUpVer)s-%(rpmRelease)s.src.rpm' % macros
    def __init__(self, *args, **kwargs):
        PackageRecipe.__init__(self, *args, **kwargs)
        self.macros.rpmName = self.rpmName
        self.macros.rpmUpVer = self.rpmUpVer
        self.macros.rpmDist = self.rpmDist
        self.macros.rpmRelease = self.rpmRelease
    def postprep(r): pass
    def postunpack(r): pass
    def postmake(r): pass
    def postmakeinstall(r): pass
    def postpolicy(r): pass
    def setup(r):
        rpmurl, rpmfilename = r.geturlinfo()
        r.addAction('echo %%_unpackaged_files_terminate_build 0 > ~/.rpmmacros')
        r.addAction('echo %%_builddir %(builddir)s >> ~/.rpmmacros')
        r.addAction('echo %%_specdir %(builddir)s/SPECS >> ~/.rpmmacros')
        r.addAction('echo %%_rpmdir %(builddir)s/RPMS >> ~/.rpmmacros')
        r.addAction('ln -s ../SPECS')
        r.addAction('echo %%_sourcedir %(builddir)s/SOURCES >> ~/.rpmmacros')
        r.addAction('echo %%dist %(rpmDist)s >> ~/.rpmmacros')
        r.addAction('ln -s ../SOURCES')
        r.addSource("/".join([rpmurl, rpmfilename]))
        userhomedir = os.path.expanduser('~')
        homedir = os.path.dirname(userhomedir)
        r.addAction('mkdir -p %(builddir)s/rpmdb/'+homedir)
        r.addAction('ln -s '+userhomedir+' %(builddir)s/rpmdb/'+homedir)
        r.addAction('/bin/rpm --initdb --root %(builddir)s/rpmdb')
        r.addAction('ln -s ../rpmdb')
        r.addAction('rpm --root %(builddir)s/rpmdb -i '+rpmfilename)
        r.addAction('mknod %(builddir)s/rpmbuild-pipe p')
        r.addAction('sed -ie "s@^[	 ]*\\(%%prep\\)@\\1\\nexec \\&> %(builddir)s/rpmbuild-pipe@" %(builddir)s/SPECS/%(rpmName)s.spec')
        r.addAction('sed -ie "s@^[	 ]*\\(%%build\\)@\\1\\nexec \\&> %(builddir)s/rpmbuild-pipe@" %(builddir)s/SPECS/%(rpmName)s.spec')
        r.addAction('sed -ie "s@^[	 ]*\\(%%install\\)@\\1\\nexec \\&> %(builddir)s/rpmbuild-pipe@" %(builddir)s/SPECS/%(rpmName)s.spec')
        r.addAction('sed -ie "/rm -rf \"\$RPM_BUILD_ROOT\"$/d" %(builddir)s/SPECS/%(rpmName)s.spec') # libtasn1
        r.addAction('sed -ie "/rm -rf \$RPM_BUILD_ROOT$/d" %(builddir)s/SPECS/%(rpmName)s.spec') # autoconf
        r.addAction('sed -ie "/rm -fr \$RPM_BUILD_ROOT$/d" %(builddir)s/SPECS/%(rpmName)s.spec') # libgcrypt
        r.addAction('sed -ie "/rm -rf \${RPM_BUILD_ROOT}$/d" %(builddir)s/SPECS/%(rpmName)s.spec') # automake
        r.addAction('sed -ie "/rm -rf %%{buildroot}$/d" %(builddir)s/SPECS/%(rpmName)s.spec') # libassuan
        r.addAction('sed -ie "/mkdir %%{buildroot}$/d" %(builddir)s/SPECS/%(rpmName)s.spec') # filesystem
        r.postprep()
        r.addAction('rpmbuild --buildpolicy=python-bytecompile --buildpolicy=compress --buildroot=%(destdir)s --noclean --nocheck --nodeps --root %(builddir)s/rpmdb -ba %(builddir)s/SPECS/%(rpmName)s.spec & echo $! > %(builddir)s/rpmbuild.pid')
        r.addAction('cat %(builddir)s/rpmbuild-pipe')
        r.postunpack()
        r.Run('cat %(builddir)s/../rpmbuild-pipe')
        r.postmake()
        r.Run('cat %(builddir)s/../rpmbuild-pipe')
        r.Run('while kill -0 $(< %(builddir)s/../rpmbuild.pid) ; do sleep .1 ; done')
        r.postmakeinstall()
        r.RpmRequires(includes='%(builddir)s/../RPMS/*/*.rpm')
        r.RpmFiles(includes='%(builddir)s/../RPMS/*/*.rpm')
        r.RpmScripts(includes='%(builddir)s/../RPMS/*/*.rpm')
        r.postpolicy()

class FactorySRPM(Factory):
    name = 'factory-srpm'
    version = '0'
    def getRecipeClass(self):
        if 'HOME' in os.environ: del os.environ['HOME']
        os.environ['HOME'] = os.path.expanduser('~')
        recipe = self.openSourceFile('%s.py' % self.packageName).read()
        exec recipe in globals()
        for line in recipe.split('\n'):
            m = RE_CLASS.match(line)
            if m: cls = m.group(1)
        recipeClass = eval(cls)
        rpmroot = tempfile.mkdtemp()
        rpmurl, rpmfilename = recipeClass.geturlinfo()
        cfg = conary.conarycfg.ConaryConfiguration(True)
        repCache = conary.build.lookaside.RepositoryCache(None, cfg)
        ff = conary.build.lookaside.FileFinder(recipeName=recipeClass.rpmName, repositoryCache=repCache, cfg=cfg)
        url = conary.build.lookaside.laUrl('%s/%s' % (rpmurl, rpmfilename))
        try:
            print 'searchLocalCache', ff.searchLocalCache(url)
            print 'searchNetworkSources', ff.searchNetworkSources(url, headers={})
        except conary.build.lookaside.PathFound,pathInfo:
            rpmfilename = pathInfo.path

        try: os.remove(os.path.expanduser('~/.rpmmacros'))
        except: pass
        p = subprocess.Popen(['/bin/rpm', '-i', rpmfilename])
        p.wait()
        p = subprocess.Popen(['/bin/rpm', '--initdb', '--root', rpmroot])
        p.wait()
        p = subprocess.Popen(['/usr/bin/rpmbuild', '--root', rpmroot, '-bp', 'rpmbuild/SPECS/%s.spec' % recipeClass.name] , cwd=os.path.expanduser('~'), stderr=subprocess.PIPE)
        lines = p.communicate()[1].split('\n')
        deps = False
        for line in lines:
            if line == 'error: Failed build dependencies:': deps = True
            if deps and " is needed by " in line:
                line = line[1:].split(' ')[0]
                if line in recipeClass.buildRequiresMap:
                    buildRequire = recipeClass.buildRequiresMap[line]
                    if not buildRequire: continue
                else:
                    if line.endswith('-devel'):
                        recipeClass.buildRequires.append(line+':runtime') # bleh
                        buildRequire = line+':devel'
                    elif line.endswith('-libs'):
                        recipeClass.buildRequires.append(line+':runtime') # bleh
                        buildRequire = line+':lib'
                    else: buildRequire = line+':runtime'
                recipeClass.buildRequires.append(buildRequire)
        shutil.rmtree(rpmroot)
        return recipeClass
